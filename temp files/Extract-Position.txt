Extract-Position.js

const jsonData = [
[["أحمد"],[1710640239836],[[[626,169,0,null],[626,171,31,null],[628,178,47,null],[632,196,64,null],[635,221,80,null],[636,246,97,null],[636,268,114,null],[636,285,130,null],[636,298,147,null],[637,308,164,null],[637,315,181,null],[638,320,197,null],[638,320,214,null]],[[593,148,666,null],[599,148,714,null],[607,148,730,null],[616,148,747,null],[624,146,763,null],[630,145,780,null],[634,145,797,null],[636,145,814,null],[637,145,830,null]],[[633,120,1193,null],[632,120,1196,null],[626,120,1213,null],[621,120,1230,null],[618,124,1246,null],[616,127,1263,null],[615,129,1280,null],[615,134,1296,null],[615,139,1313,null],[615,142,1330,null],[619,144,1346,null],[624,145,1363,null],[631,145,1380,null],[638,146,1396,null],[642,146,1413,null],[646,146,1430,null],[649,146,1446,null],[650,146,1463,null]],[[523,272,1956,null],[526,272,1962,null],[535,272,1979,null],[545,272,1995,null],[557,272,2012,null],[569,272,2029,null],[577,272,2046,null],[587,272,2063,null],[593,270,2079,null],[597,270,2096,null],[598,270,2113,null],[598,269,2173,null],[598,268,2196,null],[591,262,2212,null],[581,254,2229,null],[572,248,2245,null],[567,245,2262,null],[565,244,2279,null],[564,244,2296,null]],[[529,274,2859,null],[529,274,2879,null],[528,274,2895,null],[526,273,2912,null],[525,273,2928,null],[525,272,2945,null],[524,272,2962,null],[521,272,3012,null],[517,272,3028,null],[516,272,3045,null],[515,273,3062,null],[513,277,3078,null],[512,284,3095,null],[511,290,3111,null],[511,294,3128,null],[514,298,3145,null],[517,300,3162,null],[522,301,3178,null],[528,301,3195,null],[533,301,3212,null],[540,301,3228,null],[545,300,3245,null],[548,297,3262,null],[549,292,3278,null],[549,287,3295,null],[546,282,3311,null],[543,280,3328,null],[539,278,3345,null],[535,277,3361,null],[533,277,3378,null],[529,277,3395,null],[528,277,3412,null],[526,277,3428,null],[525,277,3445,null],[522,277,3461,null],[520,277,3478,null],[517,277,3494,null],[514,277,3511,null],[510,277,3528,null],[506,277,3544,null],[502,277,3561,null],[499,277,3578,null],[496,277,3595,null],[492,276,3611,null],[489,276,3628,null],[485,276,3644,null],[480,275,3661,null],[473,275,3677,null],[468,274,3694,null],[464,274,3711,null],[461,273,3728,null],[460,273,3744,null],[461,273,3824,null],[461,273,3827,null],[469,273,3844,null],[475,273,3861,null],[481,274,3877,null],[485,274,3894,null],[488,274,3911,null],[489,274,3927,null],[491,274,3944,null],[492,274,3961,null],[493,272,3977,null],[493,268,3994,null],[493,265,4011,null],[493,262,4027,null],[493,258,4044,null],[493,256,4061,null],[492,254,4077,null],[492,253,4111,null],[490,251,4127,null],[490,250,4144,null],[489,250,4177,null]]]]  ];
  
  console.log(jsonData);

  const positions = [];

  // Extract positions from JSON data
  const coords = jsonData[2].flatMap((element) => {
    if (Array.isArray(element)) {
      return element.slice(0, 2);
    }
    return [];
  }).filter(pos => pos !== null);
  
  // Create an array of separate x and y arrays
  const xCoords = coords.map(([x, y]) => x);
  const yCoords = coords.map(([x, y]) => y);
  
  // Calculate the minimum and maximum x and y values
  const minX = Math.min(...xCoords);
  const maxX = Math.max(...xCoords);
  const minY = Math.min(...yCoords);
  const maxY = Math.max(...yCoords);
  
  // Calculate the interval between each grid line
  const horizontalInterval = 50;
  const verticalInterval = 50;
  const numberOfHorizontalIntervals = Math.ceil((maxY - minY) / horizontalInterval);
  const numberOfVerticalIntervals = Math.ceil((maxX - minX) / verticalInterval);
  
  // Create an array of all horizontal and vertical lines
  const lines = [];
  for (let i = 0; i <= numberOfHorizontalIntervals; i++) {
    lines.push({
      x1: minX,
      y1: minY + i * horizontalInterval,
      x2: maxX,
      y2: minY + i * horizontalInterval,
    });
  }
  for (let j = 0; j <= numberOfVerticalIntervals; j++) {
    lines.push({
      x1: minX + j * verticalInterval,
      y1: minY,
      x2: minX + j * verticalInterval,
      y2: maxY,
    });
  }
  
  // Create a 2D context for the canvas
  // Assuming that `lines` and `coords` are defined, and `jsonData` is an array of arrays of arrays
const x = minX;
const y = minY;

// Draw a red rectangle at the starting point of the graph
ctx.fillStyle = 'red';
ctx.fillRect(x, y, 10, 10);

// Draw the grid lines
ctx.lineWidth = 1;
ctx.strokeStyle = 'gray';
for (const line of lines) {
  ctx.beginPath();
  ctx.moveTo(line.x1, line.y1);
  ctx.lineTo(line.x2, line.y2);
  ctx.stroke();
}

// Draw the points
ctx.fillStyle = 'red';
for (const [x, y] of coords) {
  ctx.fillRect(x, y, 5, 5);
}

// Draw the text
ctx.font = '20px Arial';
ctx.fillStyle = 'black';
for (const [coord, label, tip] of coords.map(([x, y], i) => [
  [x, y],
  jsonData[0][0][0],
  i,
])) {
  ctx.fillText(
    `x: ${coord[0].toFixed(2)}, y: ${coord[1].toFixed(2)} - ${label} (${tip})`,
    coord[0] + 5,
    coord[1] + 15
  );
}

// Add the canvas to the body
document.body.appendChild(canvas); 